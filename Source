#include <stdio.h>
#include <windows.h>
#include <time.h>
#include<conio.h>
#define scount 80
#define screen_x 100
#define screen_y 30
HANDLE rHnd;
HANDLE wHnd;
DWORD fdwMode;
COORD bufferSize = { screen_x,screen_y };
SMALL_RECT windowSize = { 0,0,screen_x - 1,screen_y - 1 }; 
CHAR_INFO consoleBuffer[screen_x * screen_y];
COORD characterPos = { 0,0 };
COORD star[scount];
int ship_x ,ship_y;
int color = 7;
int setConsole(int x, int y)
{
	wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);
	SetConsoleScreenBufferSize(wHnd, bufferSize);
	return 0;
}
int setMode()
{
	rHnd = GetStdHandle(STD_INPUT_HANDLE);
	fdwMode = ENABLE_EXTENDED_FLAGS | ENABLE_WINDOW_INPUT |
		ENABLE_MOUSE_INPUT;
	SetConsoleMode(rHnd, fdwMode);
	return 0;
}
void clear_buffer()
{
 for (int y = 0; y < screen_y; ++y) {
 for (int x = 0; x < screen_x; ++x) {
 consoleBuffer[x + screen_x * y].Char.AsciiChar = ' ';
 consoleBuffer[x + screen_x * y].Attributes = 7;
 }
 }
}
void fill_buffer_to_console()
{
WriteConsoleOutputA(wHnd, consoleBuffer, bufferSize, characterPos, 
&windowSize);
}
void init_star()
{
	int h;
	for(h = 0;h<scount;h++)
	{
		star[h] = { (rand() % screen_x),(rand() % screen_y) };
	}
}
void star_fall()
{
int i;
for (i = 0; i < scount; i++) {
if (star[i].Y >= screen_y-1) {
star[i] = { (rand() % screen_x),1 };
}
else {
star[i] = { star[i].X,star[i].Y+1 };
}
}
}
void ship(){
	consoleBuffer[(ship_x-1) + screen_x * ship_y].Char.AsciiChar = '<';
 	consoleBuffer[(ship_x-1)+ screen_x * ship_y].Attributes = color;
	consoleBuffer[ship_x + screen_x * ship_y].Char.AsciiChar = 'o';
 	consoleBuffer[ship_x + screen_x * ship_y].Attributes = color;
 	consoleBuffer[(ship_x+1) + screen_x * ship_y].Char.AsciiChar = '>';
 	consoleBuffer[(ship_x+1)+ screen_x * ship_y].Attributes = color;
}
void fill_star_to_buffer()
{
	for(int m = 0;m < scount; m++){
		consoleBuffer[star[m].X + screen_x * star[m].Y].Char.AsciiChar = '*';
 		consoleBuffer[star[m].X + screen_x * star[m].Y].Attributes = 7;
	}
}
int main()
{
	int i;
	srand(time(NULL));
	bool play = true;
	DWORD numEvents = 0;
	DWORD numEventsRead = 0;
	setConsole(screen_x, screen_y);
	setMode();
	init_star();
	i = 0;
	while (play)
	{
		GetNumberOfConsoleInputEvents(rHnd, &numEvents);
		if (numEvents != 0) {
			INPUT_RECORD* eventBuffer = new INPUT_RECORD[numEvents];
			ReadConsoleInput(rHnd, eventBuffer, numEvents, &numEventsRead);
			for (DWORD i = 0; i < numEventsRead; ++i) {
				if (eventBuffer[i].EventType == KEY_EVENT &&
					eventBuffer[i].Event.KeyEvent.bKeyDown == true) {
					if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE) {
						play = false;
					}
				}
				else if (eventBuffer[i].EventType == MOUSE_EVENT) {
					int posx = eventBuffer[i].Event.MouseEvent.dwMousePosition.X;
					int posy = eventBuffer[i].Event.MouseEvent.dwMousePosition.Y;
					if (eventBuffer[i].Event.MouseEvent.dwButtonState &
						FROM_LEFT_1ST_BUTTON_PRESSED) {
						color = (1+(rand() % 7));
					}
					else if (eventBuffer[i].Event.MouseEvent.dwEventFlags & MOUSE_MOVED) {
					ship_x = posx;
					ship_y = posy;
					}
				}
			}
			delete[] eventBuffer;
		}
		star_fall();
		clear_buffer();
		fill_star_to_buffer();
		ship();
		fill_buffer_to_console();
		for(int w = 0;w<scount;w++){
			if(star[w].X == ship_x && star[w].Y == ship_y){
				play = false;	
			}
			else if(star[w].X == ship_x-1 && star[w].Y == ship_y){
				play = false;
			}
			else if(star[w].X == ship_x+1 && star[w].Y == ship_y){
				play = false;
			}
		}
		Sleep(100);
	}
	return 0;
}
